name: Test SSH Connection and Deploy

on:
  push:
    branches:
      - main

jobs:
  test_ssh:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: List Files in Workspace
      run: ls -R

    - name: Test SSH Connection
      env:
        HOST_NAME: ${{ secrets.SERVER_HOST_NAME }}
        KEY_NAME: ${{ secrets.SERVER_KEY_NAME }}
        IP_ADDRESS: ${{ secrets.IP_ADDRESS }}
      run: |
        mkdir -p ~/.ssh
        echo "$KEY_NAME" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh -vvv -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $HOST_NAME@$IP_ADDRESS 'echo "Connected successfully"'
        
    - name: Copy Files to Server
      env:
        HOST_NAME: ${{ secrets.SERVER_HOST_NAME }}
        KEY_NAME: ${{ secrets.SERVER_KEY_NAME }}
        IP_ADDRESS: ${{ secrets.IP_ADDRESS }}
      run: |
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r ./* $HOST_NAME@$IP_ADDRESS:/home/azureuser/

    - name: Deploy Application
      env:
        HOST_NAME: ${{ secrets.SERVER_HOST_NAME }}
        KEY_NAME: ${{ secrets.SERVER_KEY_NAME }}
        IP_ADDRESS: ${{ secrets.IP_ADDRESS }}
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $HOST_NAME@$IP_ADDRESS << 'EOF'
          echo "Deploying application on VM"
          sudo apt update
          sudo apt install -y python3-venv python3-pip
          python3 -m venv ~/myenv
          source ~/myenv/bin/activate
          pip install --upgrade pip
          pip install gunicorn
          
          # Create the service file
          echo "[Unit]
          Description=Gunicorn instance to serve my application
          After=network.target

          [Service]
          User=azureuser
          Group=www-data
          WorkingDirectory=/home/azureuser
          Environment='PATH=/home/azureuser/myenv'
          ExecStart=/home/azureuser/myenv/bin/gunicorn --workers 3 --bind unix:myapp.sock -m 007 app:app

          [Install]
          WantedBy=multi-user.target" | sudo tee /etc/systemd/system/myapp.service

          # Reload systemd and start the service
          sudo systemctl daemon-reload
          sudo systemctl start myapp.service
          sudo systemctl enable myapp.service
        EOF
